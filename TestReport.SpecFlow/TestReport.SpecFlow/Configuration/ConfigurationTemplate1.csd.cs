//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestReport.SpecFlow.Configuration
{
    
    
    /// <summary>
    /// The SpecFlowReportSection Configuration Section.
    /// </summary>
    public partial class SpecFlowReportSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the SpecFlowReportSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string SpecFlowReportSectionSectionName = "specFlow.Report";
        
        /// <summary>
        /// The XML path of the SpecFlowReportSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string SpecFlowReportSectionSectionPath = "specFlow.Report";
        
        /// <summary>
        /// Gets the SpecFlowReportSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public static global::TestReport.SpecFlow.Configuration.SpecFlowReportSection Instance
        {
            get
            {
                return ((global::TestReport.SpecFlow.Configuration.SpecFlowReportSection)(global::System.Configuration.ConfigurationManager.GetSection(global::TestReport.SpecFlow.Configuration.SpecFlowReportSection.SpecFlowReportSectionSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TestReport.SpecFlow.Configuration.SpecFlowReportSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::TestReport.SpecFlow.Configuration.SpecFlowReportSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region MailSettings Property
        /// <summary>
        /// The XML name of the <see cref="MailSettings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string MailSettingsPropertyName = "mailSettings";
        
        /// <summary>
        /// Gets or sets the MailSettings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The MailSettings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TestReport.SpecFlow.Configuration.SpecFlowReportSection.MailSettingsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::TestReport.SpecFlow.Configuration.MailSettingsElement MailSettings
        {
            get
            {
                return ((global::TestReport.SpecFlow.Configuration.MailSettingsElement)(base[global::TestReport.SpecFlow.Configuration.SpecFlowReportSection.MailSettingsPropertyName]));
            }
            set
            {
                base[global::TestReport.SpecFlow.Configuration.SpecFlowReportSection.MailSettingsPropertyName] = value;
            }
        }
        #endregion
        
        #region ReportSettings Property
        /// <summary>
        /// The XML name of the <see cref="ReportSettings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string ReportSettingsPropertyName = "reportSettings";
        
        /// <summary>
        /// Gets or sets the ReportSettings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The ReportSettings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TestReport.SpecFlow.Configuration.SpecFlowReportSection.ReportSettingsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::TestReport.SpecFlow.Configuration.ReportSettingsElement ReportSettings
        {
            get
            {
                return ((global::TestReport.SpecFlow.Configuration.ReportSettingsElement)(base[global::TestReport.SpecFlow.Configuration.SpecFlowReportSection.ReportSettingsPropertyName]));
            }
            set
            {
                base[global::TestReport.SpecFlow.Configuration.SpecFlowReportSection.ReportSettingsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace TestReport.SpecFlow.Configuration
{
    
    
    /// <summary>
    /// The MailSettingsElement Configuration Element.
    /// </summary>
    public partial class MailSettingsElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Host Property
        /// <summary>
        /// The XML name of the <see cref="Host"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string HostPropertyName = "host";
        
        /// <summary>
        /// Gets or sets the Host.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Host.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TestReport.SpecFlow.Configuration.MailSettingsElement.HostPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Host
        {
            get
            {
                return ((string)(base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.HostPropertyName]));
            }
            set
            {
                base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.HostPropertyName] = value;
            }
        }
        #endregion
        
        #region Username Property
        /// <summary>
        /// The XML name of the <see cref="Username"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string UsernamePropertyName = "username";
        
        /// <summary>
        /// Gets or sets the Username.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Username.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TestReport.SpecFlow.Configuration.MailSettingsElement.UsernamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Username
        {
            get
            {
                return ((string)(base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.UsernamePropertyName]));
            }
            set
            {
                base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.UsernamePropertyName] = value;
            }
        }
        #endregion
        
        #region Password Property
        /// <summary>
        /// The XML name of the <see cref="Password"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string PasswordPropertyName = "password";
        
        /// <summary>
        /// Gets or sets the Password.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Password.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TestReport.SpecFlow.Configuration.MailSettingsElement.PasswordPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Password
        {
            get
            {
                return ((string)(base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.PasswordPropertyName]));
            }
            set
            {
                base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.PasswordPropertyName] = value;
            }
        }
        #endregion
        
        #region Subject Property
        /// <summary>
        /// The XML name of the <see cref="Subject"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string SubjectPropertyName = "subject";
        
        /// <summary>
        /// Gets or sets the Subject.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Subject.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TestReport.SpecFlow.Configuration.MailSettingsElement.SubjectPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Subject
        {
            get
            {
                return ((string)(base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.SubjectPropertyName]));
            }
            set
            {
                base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.SubjectPropertyName] = value;
            }
        }
        #endregion
        
        #region Port Property
        /// <summary>
        /// The XML name of the <see cref="Port"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string PortPropertyName = "port";
        
        /// <summary>
        /// Gets or sets the Port.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Port.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TestReport.SpecFlow.Configuration.MailSettingsElement.PortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int Port
        {
            get
            {
                return ((int)(base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.PortPropertyName]));
            }
            set
            {
                base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.PortPropertyName] = value;
            }
        }
        #endregion
        
        #region EnableSsl Property
        /// <summary>
        /// The XML name of the <see cref="EnableSsl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string EnableSslPropertyName = "enableSsl";
        
        /// <summary>
        /// Gets or sets the EnableSsl.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The EnableSsl.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TestReport.SpecFlow.Configuration.MailSettingsElement.EnableSslPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool EnableSsl
        {
            get
            {
                return ((bool)(base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.EnableSslPropertyName]));
            }
            set
            {
                base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.EnableSslPropertyName] = value;
            }
        }
        #endregion
        
        #region FromAddress Property
        /// <summary>
        /// The XML name of the <see cref="FromAddress"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string FromAddressPropertyName = "fromAddress";
        
        /// <summary>
        /// Gets or sets the FromAddress.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The FromAddress.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TestReport.SpecFlow.Configuration.MailSettingsElement.FromAddressPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string FromAddress
        {
            get
            {
                return ((string)(base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.FromAddressPropertyName]));
            }
            set
            {
                base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.FromAddressPropertyName] = value;
            }
        }
        #endregion
        
        #region ToAddresses Property
        /// <summary>
        /// The XML name of the <see cref="ToAddresses"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string ToAddressesPropertyName = "toAddresses";
        
        /// <summary>
        /// Gets or sets seperate by ';'
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("Seperate by \';\'")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TestReport.SpecFlow.Configuration.MailSettingsElement.ToAddressesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ToAddresses
        {
            get
            {
                return ((string)(base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.ToAddressesPropertyName]));
            }
            set
            {
                base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.ToAddressesPropertyName] = value;
            }
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TestReport.SpecFlow.Configuration.MailSettingsElement.EnabledPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Enabled
        {
            get
            {
                return ((bool)(base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.EnabledPropertyName]));
            }
            set
            {
                base[global::TestReport.SpecFlow.Configuration.MailSettingsElement.EnabledPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace TestReport.SpecFlow.Configuration
{
    
    
    /// <summary>
    /// The ReportSettingsElement Configuration Element.
    /// </summary>
    public partial class ReportSettingsElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Path Property
        /// <summary>
        /// The XML name of the <see cref="Path"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string PathPropertyName = "path";
        
        /// <summary>
        /// Gets or sets the Path.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Path.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TestReport.SpecFlow.Configuration.ReportSettingsElement.PathPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Path
        {
            get
            {
                return ((string)(base[global::TestReport.SpecFlow.Configuration.ReportSettingsElement.PathPropertyName]));
            }
            set
            {
                base[global::TestReport.SpecFlow.Configuration.ReportSettingsElement.PathPropertyName] = value;
            }
        }
        #endregion
    }
}
